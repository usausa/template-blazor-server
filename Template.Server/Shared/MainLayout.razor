@inherits LayoutComponentBase
@implements IMenuSectionCallback
@inject NavigationManager NavigationManager
@inject LoginManager LoginManager

<CascadingValue Value="this">
    <ErrorBoundary @ref="errorBoundary">
        <ChildContent>
            <MudThemeProvider Theme="@Styles.Theme" />
            <MudDialogProvider />
            <MudSnackbarProvider />
            <MudLayout>
                <MudAppBar Dense="true">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => DrawerToggle())" />
                    <MudSpacer />
                    @menu
                    <AuthorizeView>
                        <NotAuthorized>
                            <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Inherit" OnClick="OnLoginClick" />
                        </NotAuthorized>
                        <Authorized>
                            <MudText>@user!.Name()</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="OnLogoutClick"/>
                        </Authorized>
                    </AuthorizeView>
                </MudAppBar>
                <MudDrawer @bind-Open="drawerOpen" Elevation="1">
                    <MudDrawerHeader Dense="true">
                        <MudText Typo="Typo.h6">Typography</MudText>
                    </MudDrawerHeader>
                </MudDrawer>
                <MudMainContent>
                    <MudContainer MaxWidth="MaxWidth.Large" Class="pt-4">
                        @Body
                    </MudContainer>
                </MudMainContent>
            </MudLayout>
        </ChildContent>
        <ErrorContent>
            <MudThemeProvider Theme="@Styles.NoMenuTheme" />
            <MudDialogProvider />
            <MudSnackbarProvider />
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.Large" Class="d-flex justify-center pt-16">
                    <ErrorDispatcher Exception="context" RecoverRequest="() => errorBoundary?.Recover()" />
                </MudContainer>
            </MudMainContent>
        </ErrorContent>
    </ErrorBoundary>
</CascadingValue>

@code {
    private ErrorBoundary? errorBoundary;

    private RenderFragment? menu;

    private bool drawerOpen = true;

    private ClaimsPrincipal? user;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        errorBoundary?.Recover();

        user = (await AuthenticationState).User;
    }

    public void SetMenu(RenderFragment? value)
    {
        menu = value;
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    private void OnLoginClick()
    {
        NavigationManager.NavigateTo("/login");
    }

    private async Task OnLogoutClick()
    {
        await LoginManager.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }
}
